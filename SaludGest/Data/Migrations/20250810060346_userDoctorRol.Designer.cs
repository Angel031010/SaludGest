// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SaludGest.Data;

#nullable disable

namespace SaludGest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250810060346_userDoctorRol")]
    partial class userDoctorRol
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "e3294a24-568b-492f-8689-a90d5fd16796",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "75f458e1-0069-40e8-b778-b33a89bf231a",
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ca256d5b-cbe8-485c-a04b-d1292c34f1d6",
                            RoleId = "e3294a24-568b-492f-8689-a90d5fd16796"
                        },
                        new
                        {
                            UserId = "1ca8bb2f-e7d3-4736-80c1-7e967c3175c7",
                            RoleId = "75f458e1-0069-40e8-b778-b33a89bf231a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SaludGest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ca256d5b-cbe8-485c-a04b-d1292c34f1d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9838b58d-e24b-42c5-8ae6-7d6c9d7e1e8a",
                            Email = "admin@saludgest.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SALUDGEST.COM",
                            NormalizedUserName = "ADMIN@SALUDGEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFQxkRSuCU9F0Si6L1BzBkSKO20TnWz2JWu3n6aoqOf3dNz0+PcWiOYgr+vhGkHz6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "71b87c03-1521-41f3-ac2c-2a992b78ecc9",
                            TwoFactorEnabled = false,
                            UserName = "admin@saludgest.com"
                        },
                        new
                        {
                            Id = "1ca8bb2f-e7d3-4736-80c1-7e967c3175c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "17018fd9-bbeb-4d93-bf37-6740aa9ac620",
                            Email = "doctor@saludgest.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DOCTOR@SALUDGEST.COM",
                            NormalizedUserName = "DOCTOR@SALUDGEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH41P1QC1OfD/O5TkeG3MQzTc/vVt3HiZLmeP0PFO7MTd/6njFQppJa9SkQmy2vwsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f06f4e51-1140-41c6-9c36-e0747b4c3b54",
                            TwoFactorEnabled = false,
                            UserName = "doctor@saludgest.com"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Cita", b =>
                {
                    b.Property<int>("CitaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CitaId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaHora")
                        .HasColumnType("datetime2");

                    b.Property<int>("MedicoId")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("CitaId");

                    b.HasIndex("MedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Citas");

                    b.HasData(
                        new
                        {
                            CitaId = 1,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Completada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5238),
                            FechaHora = new DateTime(2025, 1, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicoId = 1,
                            Observaciones = "Consulta general",
                            PacienteId = 1
                        },
                        new
                        {
                            CitaId = 2,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Completada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5244),
                            FechaHora = new DateTime(2025, 3, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicoId = 2,
                            Observaciones = "Revisión por migraña",
                            PacienteId = 2
                        },
                        new
                        {
                            CitaId = 3,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Completada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5246),
                            FechaHora = new DateTime(2025, 4, 18, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicoId = 3,
                            Observaciones = "Consulta por alergia",
                            PacienteId = 3
                        },
                        new
                        {
                            CitaId = 4,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Completada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5248),
                            FechaHora = new DateTime(2025, 5, 10, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicoId = 4,
                            Observaciones = "Consulta de seguimiento",
                            PacienteId = 4
                        },
                        new
                        {
                            CitaId = 5,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Programada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5250),
                            FechaHora = new DateTime(2025, 6, 8, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicoId = 5,
                            Observaciones = "Primera cita",
                            PacienteId = 5
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Departamento", b =>
                {
                    b.Property<int>("DepartamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartamentoId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreDepartamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartamentoId");

                    b.ToTable("Departamentos");

                    b.HasData(
                        new
                        {
                            DepartamentoId = 1,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4369),
                            NombreDepartamento = "Cardiología",
                            Ubicacion = "Piso 1"
                        },
                        new
                        {
                            DepartamentoId = 2,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4386),
                            NombreDepartamento = "Neurología",
                            Ubicacion = "Piso 2"
                        },
                        new
                        {
                            DepartamentoId = 3,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4388),
                            NombreDepartamento = "Pediatría",
                            Ubicacion = "Piso 3"
                        },
                        new
                        {
                            DepartamentoId = 4,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4389),
                            NombreDepartamento = "Urgencias",
                            Ubicacion = "Piso 0"
                        },
                        new
                        {
                            DepartamentoId = 5,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4391),
                            NombreDepartamento = "Oncología",
                            Ubicacion = "Piso 4"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Especialidad", b =>
                {
                    b.Property<int>("EspecialidadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EspecialidadId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreEspecialidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EspecialidadId");

                    b.ToTable("Especialidades");

                    b.HasData(
                        new
                        {
                            EspecialidadId = 1,
                            Activo = true,
                            Descripcion = "Especialista en corazón",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4702),
                            NombreEspecialidad = "Cardiólogo"
                        },
                        new
                        {
                            EspecialidadId = 2,
                            Activo = true,
                            Descripcion = "Especialista en sistema nervioso",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4704),
                            NombreEspecialidad = "Neurólogo"
                        },
                        new
                        {
                            EspecialidadId = 3,
                            Activo = true,
                            Descripcion = "Especialista en niños",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4706),
                            NombreEspecialidad = "Pediatra"
                        },
                        new
                        {
                            EspecialidadId = 4,
                            Activo = true,
                            Descripcion = "Especialista en cáncer",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4708),
                            NombreEspecialidad = "Oncólogo"
                        },
                        new
                        {
                            EspecialidadId = 5,
                            Activo = true,
                            Descripcion = "Médico general",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4709),
                            NombreEspecialidad = "General"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Factura", b =>
                {
                    b.Property<int>("FacturaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MontoTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("FacturaId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Facturas");

                    b.HasData(
                        new
                        {
                            FacturaId = 1,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Pagada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5178),
                            FechaEmision = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoTotal = 150.00m,
                            PacienteId = 1
                        },
                        new
                        {
                            FacturaId = 2,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5184),
                            FechaEmision = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoTotal = 200.00m,
                            PacienteId = 2
                        },
                        new
                        {
                            FacturaId = 3,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Pagada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5186),
                            FechaEmision = new DateTime(2025, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoTotal = 180.00m,
                            PacienteId = 3
                        },
                        new
                        {
                            FacturaId = 4,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Cancelada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5188),
                            FechaEmision = new DateTime(2025, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoTotal = 220.00m,
                            PacienteId = 4
                        },
                        new
                        {
                            FacturaId = 5,
                            Activo = true,
                            Eliminado = false,
                            Estado = "Pagada",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5190),
                            FechaEmision = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontoTotal = 250.00m,
                            PacienteId = 5
                        });
                });

            modelBuilder.Entity("SaludGest.Models.HistorialMedico", b =>
                {
                    b.Property<int>("HistorialMedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistorialMedicoId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("HistorialMedicoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("HistorialMedico");

                    b.HasData(
                        new
                        {
                            HistorialMedicoId = 1,
                            Activo = true,
                            Diagnostico = "Gripe",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4991),
                            FechaRegistro = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notas = "Reposo y paracetamol",
                            PacienteId = 1
                        },
                        new
                        {
                            HistorialMedicoId = 2,
                            Activo = true,
                            Diagnostico = "Migraña",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4993),
                            FechaRegistro = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notas = "Ibuprofeno cada 8h",
                            PacienteId = 2
                        },
                        new
                        {
                            HistorialMedicoId = 3,
                            Activo = true,
                            Diagnostico = "Alergia",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5069),
                            FechaRegistro = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notas = "Loratadina por 7 días",
                            PacienteId = 3
                        },
                        new
                        {
                            HistorialMedicoId = 4,
                            Activo = true,
                            Diagnostico = "Gastritis",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5072),
                            FechaRegistro = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notas = "Omeprazol en ayunas",
                            PacienteId = 4
                        },
                        new
                        {
                            HistorialMedicoId = 5,
                            Activo = true,
                            Diagnostico = "Infección de garganta",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5074),
                            FechaRegistro = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notas = "Amoxicilina cada 12h",
                            PacienteId = 5
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentoId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Laboratorio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Presentacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicamentoId");

                    b.ToTable("Medicamentos");

                    b.HasData(
                        new
                        {
                            MedicamentoId = 1,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4884),
                            Laboratorio = "Genéricos MX",
                            Nombre = "Paracetamol",
                            Presentacion = "Tabletas 500mg"
                        },
                        new
                        {
                            MedicamentoId = 2,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4887),
                            Laboratorio = "Farmacéutica Alfa",
                            Nombre = "Ibuprofeno",
                            Presentacion = "Cápsulas 200mg"
                        },
                        new
                        {
                            MedicamentoId = 3,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4889),
                            Laboratorio = "Laboratorios Beta",
                            Nombre = "Amoxicilina",
                            Presentacion = "Suspensión 250mg"
                        },
                        new
                        {
                            MedicamentoId = 4,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4890),
                            Laboratorio = "Genéricos MX",
                            Nombre = "Omeprazol",
                            Presentacion = "Cápsulas 20mg"
                        },
                        new
                        {
                            MedicamentoId = 5,
                            Activo = true,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4891),
                            Laboratorio = "Pharma Salud",
                            Nombre = "Loratadina",
                            Presentacion = "Tabletas 10mg"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Medico", b =>
                {
                    b.Property<int>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicoId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EspecialidadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicoId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            MedicoId = 1,
                            Activo = true,
                            ApellidoMaterno = "Soto",
                            ApellidoPaterno = "García",
                            DepartamentoId = 1,
                            Eliminado = false,
                            Email = "lgarcia@saludgest.com",
                            EspecialidadId = 1,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4759),
                            Nombre = "Luis",
                            Telefono = "5551234561"
                        },
                        new
                        {
                            MedicoId = 2,
                            Activo = true,
                            ApellidoMaterno = "Díaz",
                            ApellidoPaterno = "López",
                            DepartamentoId = 2,
                            Eliminado = false,
                            Email = "alopez@saludgest.com",
                            EspecialidadId = 2,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4767),
                            Nombre = "Ana",
                            Telefono = "5551234562"
                        },
                        new
                        {
                            MedicoId = 3,
                            Activo = true,
                            ApellidoMaterno = "Fernández",
                            ApellidoPaterno = "Ramírez",
                            DepartamentoId = 3,
                            Eliminado = false,
                            Email = "cramirez@saludgest.com",
                            EspecialidadId = 3,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4769),
                            Nombre = "Carlos",
                            Telefono = "5551234563"
                        },
                        new
                        {
                            MedicoId = 4,
                            Activo = true,
                            ApellidoMaterno = "Torres",
                            ApellidoPaterno = "Núñez",
                            DepartamentoId = 5,
                            Eliminado = false,
                            Email = "mnunez@saludgest.com",
                            EspecialidadId = 4,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4772),
                            Nombre = "María",
                            Telefono = "5551234564"
                        },
                        new
                        {
                            MedicoId = 5,
                            Activo = true,
                            ApellidoMaterno = "Ruiz",
                            ApellidoPaterno = "Castro",
                            DepartamentoId = 4,
                            Eliminado = false,
                            Email = "pcastro@saludgest.com",
                            EspecialidadId = 5,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4774),
                            Nombre = "Pedro",
                            Telefono = "5551234565"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacienteId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ApellidoMaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApellidoPaterno")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("FotoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSeguroSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = 1,
                            Activo = true,
                            ApellidoMaterno = "Gómez",
                            ApellidoPaterno = "Pérez",
                            Direccion = "Av. Siempre Viva 123",
                            Eliminado = false,
                            Email = "juanp@correo.com",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4821),
                            FechaNacimiento = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Juan",
                            NumeroSeguroSocial = "ABC123456",
                            Telefono = "5551112221"
                        },
                        new
                        {
                            PacienteId = 2,
                            Activo = true,
                            ApellidoMaterno = "Hernández",
                            ApellidoPaterno = "Martínez",
                            Direccion = "Calle Luna 456",
                            Eliminado = false,
                            Email = "lauram@correo.com",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4830),
                            FechaNacimiento = new DateTime(1985, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            Nombre = "Laura",
                            NumeroSeguroSocial = "DEF789012",
                            Telefono = "5551112222"
                        },
                        new
                        {
                            PacienteId = 3,
                            Activo = true,
                            ApellidoMaterno = "López",
                            ApellidoPaterno = "Gómez",
                            Direccion = "Calle Sol 789",
                            Eliminado = false,
                            Email = "carlosg@correo.com",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4833),
                            FechaNacimiento = new DateTime(1978, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Carlos",
                            NumeroSeguroSocial = "GHI345678",
                            Telefono = "5551112223"
                        },
                        new
                        {
                            PacienteId = 4,
                            Activo = true,
                            ApellidoMaterno = "Ramírez",
                            ApellidoPaterno = "Torres",
                            Direccion = "Calle Estrella 101",
                            Eliminado = false,
                            Email = "elenat@correo.com",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4836),
                            FechaNacimiento = new DateTime(1992, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Femenino",
                            Nombre = "Elena",
                            NumeroSeguroSocial = "JKL901234",
                            Telefono = "5551112224"
                        },
                        new
                        {
                            PacienteId = 5,
                            Activo = true,
                            ApellidoMaterno = "Vega",
                            ApellidoPaterno = "Sánchez",
                            Direccion = "Calle Río 202",
                            Eliminado = false,
                            Email = "diegos@correo.com",
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4840),
                            FechaNacimiento = new DateTime(2000, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Genero = "Masculino",
                            Nombre = "Diego",
                            NumeroSeguroSocial = "MNO567890",
                            Telefono = "5551112225"
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Prescripcion", b =>
                {
                    b.Property<int>("PrescripcionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescripcionId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Dosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaPrescripcion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Frecuencia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HistorialMedicoId")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoId")
                        .HasColumnType("int");

                    b.HasKey("PrescripcionId");

                    b.HasIndex("HistorialMedicoId");

                    b.HasIndex("MedicamentoId");

                    b.ToTable("Prescripciones");

                    b.HasData(
                        new
                        {
                            PrescripcionId = 1,
                            Activo = true,
                            Dosis = "500mg",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5124),
                            FechaFin = new DateTime(2025, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrescripcion = new DateTime(2025, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Frecuencia = "Cada 8h",
                            HistorialMedicoId = 1,
                            MedicamentoId = 1
                        },
                        new
                        {
                            PrescripcionId = 2,
                            Activo = true,
                            Dosis = "200mg",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5128),
                            FechaFin = new DateTime(2025, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrescripcion = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Frecuencia = "Cada 8h",
                            HistorialMedicoId = 2,
                            MedicamentoId = 2
                        },
                        new
                        {
                            PrescripcionId = 3,
                            Activo = true,
                            Dosis = "10mg",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5131),
                            FechaFin = new DateTime(2025, 4, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrescripcion = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Frecuencia = "Cada 24h",
                            HistorialMedicoId = 3,
                            MedicamentoId = 5
                        },
                        new
                        {
                            PrescripcionId = 4,
                            Activo = true,
                            Dosis = "20mg",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5133),
                            FechaFin = new DateTime(2025, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrescripcion = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Frecuencia = "Cada 24h",
                            HistorialMedicoId = 4,
                            MedicamentoId = 4
                        },
                        new
                        {
                            PrescripcionId = 5,
                            Activo = true,
                            Dosis = "250mg",
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(5135),
                            FechaFin = new DateTime(2025, 6, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FechaPrescripcion = new DateTime(2025, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Frecuencia = "Cada 12h",
                            HistorialMedicoId = 5,
                            MedicamentoId = 3
                        });
                });

            modelBuilder.Entity("SaludGest.Models.Sala", b =>
                {
                    b.Property<int>("SalaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaId"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumeroSala")
                        .HasColumnType("int");

                    b.Property<string>("TipoSala")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalaId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Salas");

                    b.HasData(
                        new
                        {
                            SalaId = 1,
                            Activo = true,
                            DepartamentoId = 1,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4940),
                            NumeroSala = 101,
                            TipoSala = "Consulta"
                        },
                        new
                        {
                            SalaId = 2,
                            Activo = true,
                            DepartamentoId = 2,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4943),
                            NumeroSala = 201,
                            TipoSala = "Consulta"
                        },
                        new
                        {
                            SalaId = 3,
                            Activo = true,
                            DepartamentoId = 3,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4944),
                            NumeroSala = 301,
                            TipoSala = "Emergencia"
                        },
                        new
                        {
                            SalaId = 4,
                            Activo = true,
                            DepartamentoId = 4,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4946),
                            NumeroSala = 1,
                            TipoSala = "Emergencia"
                        },
                        new
                        {
                            SalaId = 5,
                            Activo = true,
                            DepartamentoId = 5,
                            Eliminado = false,
                            FechaCreacion = new DateTime(2025, 8, 10, 0, 3, 44, 196, DateTimeKind.Local).AddTicks(4947),
                            NumeroSala = 401,
                            TipoSala = "Quirófano"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SaludGest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SaludGest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SaludGest.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SaludGest.Models.Cita", b =>
                {
                    b.HasOne("SaludGest.Models.Medico", "Medico")
                        .WithMany("Citas")
                        .HasForeignKey("MedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGest.Models.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SaludGest.Models.Factura", b =>
                {
                    b.HasOne("SaludGest.Models.Paciente", "Paciente")
                        .WithMany("Facturas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SaludGest.Models.HistorialMedico", b =>
                {
                    b.HasOne("SaludGest.Models.Paciente", "Paciente")
                        .WithMany("HistorialesMedicos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("SaludGest.Models.Medico", b =>
                {
                    b.HasOne("SaludGest.Models.Departamento", "Departamento")
                        .WithMany("Medicos")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGest.Models.Especialidad", "Especialidad")
                        .WithMany("Medicos")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");

                    b.Navigation("Especialidad");
                });

            modelBuilder.Entity("SaludGest.Models.Prescripcion", b =>
                {
                    b.HasOne("SaludGest.Models.HistorialMedico", "HistorialMedico")
                        .WithMany("Prescripciones")
                        .HasForeignKey("HistorialMedicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SaludGest.Models.Medicamento", "Medicamento")
                        .WithMany("Prescripciones")
                        .HasForeignKey("MedicamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistorialMedico");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("SaludGest.Models.Sala", b =>
                {
                    b.HasOne("SaludGest.Models.Departamento", "Departamento")
                        .WithMany("Salas")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("SaludGest.Models.Departamento", b =>
                {
                    b.Navigation("Medicos");

                    b.Navigation("Salas");
                });

            modelBuilder.Entity("SaludGest.Models.Especialidad", b =>
                {
                    b.Navigation("Medicos");
                });

            modelBuilder.Entity("SaludGest.Models.HistorialMedico", b =>
                {
                    b.Navigation("Prescripciones");
                });

            modelBuilder.Entity("SaludGest.Models.Medicamento", b =>
                {
                    b.Navigation("Prescripciones");
                });

            modelBuilder.Entity("SaludGest.Models.Medico", b =>
                {
                    b.Navigation("Citas");
                });

            modelBuilder.Entity("SaludGest.Models.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Facturas");

                    b.Navigation("HistorialesMedicos");
                });
#pragma warning restore 612, 618
        }
    }
}
